


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             text, CODE, READONLY
    2 00000000                 export           FILTER_S
    3 00000000         FILTER_S
    4 00000000         ; This is the subroutine for calculating the filtered va
                       lue.
    5 00000000         ; There are four input arguments:
    6 00000000         ; R1 for the location of array OriginalSignal
    7 00000000         ; R2 for the location of array FilteredSignal
    8 00000000         ; R3 for the number of N
    9 00000000         ; R4 for the number of D
   10 00000000         ; R0 holds the return value, in this case, the average r
                       esult
   11 00000000         ; R5 holds the temporary sum.
   12 00000000         ; R6 - R12 are general purpose reg. All used later.
   13 00000000 2C00            CMP              R4, #0
   14 00000002 D027            BEQ              FINISH      ; Quit immediately 
                                                            for 0 depth
   15 00000004         
   16 00000004 F04F 0600       MOV              R6, #0      ; R6 holds the coun
                                                            ter i of the outer 
                                                            loop, which iterate
                                                            s through the origi
                                                            nal data array
   17 00000008 F04F 0500       MOV              R5, #0      ; R5 holds the temp
                                                            orary sum. Initiali
                                                            ze it to 0.
   18 0000000C F206 0604       SUB              R6, #-4     ; Decrement R6 once
                                                            , for ease of use i
                                                            n the loop.
   19 00000010         
   20 00000010         ORI_SIG_LOOP
   21 00000010 F106 0604       ADD              R6, R6, #4  ; Increment the cou
                                                            nter.
   22 00000014 429E            CMP              R6, R3
   23 00000016 DA1D            BGE              FINISH      ; Branch to FINISH 
                                                            if (i >= N)
   24 00000018         
   25 00000018 EBA6 0854       SUB              R8, R6, R4, LSR #1 ; R8 holds t
                                                            he value of (i - D/
                                                            2)
   26 0000001C EB06 0954       ADD              R9, R6, R4, LSR #1 ; R9 holds t
                                                            he value of (i + D/
                                                            2)
   27 00000020 F858 7C04       LDR              R7, [R8, #-4] ; R7 holds the co
                                                            unter j of the inne
                                                            r loop.
   28 00000024         
   29 00000024 F004 0C01       AND              R12, R4, #1 ; Check if D is odd
                                                            . 1 for odd, 0 for 
                                                            even. 
   30 00000028 D00E            BEQ              EVEN_DEPTH  ; Branch to EVEN_DE
                                                            PTH if D is even (R
                                                            12 == 0)
   31 0000002A E7FF            B                ODD_DEPTH   ; Otherwise branch 
                                                            to ODD_DEPTH
   32 0000002C         
   33 0000002C         ODD_DEPTH
   34 0000002C F107 0704       ADD              R7, R7, #4  ; Increment the cou
                                                            nter



ARM Macro Assembler    Page 2 


   35 00000030 454F            CMP              R7, R9      ; If j > (i + D/2)
   36 00000032 DC09            BGT              AVERAGE     ; Jump out from the
                                                             inner loop
   37 00000034         
   38 00000034 2F00            CMP              R7, #0      ; If j < 0
   39 00000036 DBF9            BLT              ODD_DEPTH   ; Do not change the
                                                             sum
   40 00000038 F1A3 0A01       SUB              R10, R3, #1 ; R10 = N - 1
   41 0000003C 4557            CMP              R7, R10     ; If j > (N-1)
   42 0000003E DBF5            BLT              ODD_DEPTH   ; Do not change the
                                                             sum
   43 00000040         
   44 00000040 440D            ADD              R5, R5, R1  ; sum += original s
                                                            ignal
   45 00000042 F101 0104       ADD              R1, R1, #4  ; Now R1 points to 
                                                            the next number in 
                                                            the original signal
                                                             array.
   46 00000046 E7F1            B                ODD_DEPTH
   47 00000048         
   48 00000048         EVEN_DEPTH
   49 00000048         
   50 00000048         AVERAGE
   51 00000048 FB95 F0F4       SDIV             R0, R5, R4  ; average = sum / D
                                                            
   52 0000004C 6802            LDR              R2, [R0]    ; Load the average 
                                                            into corresponding 
                                                            index in filtered a
                                                            rray.
   53 0000004E F102 0204       ADD              R2, R2, #4  ; Now R2 points to 
                                                            the next element in
                                                             Filtered array.
   54 00000052 E7DD            B                ORI_SIG_LOOP
   55 00000054         
   56 00000054         FINISH
   57 00000054 4770            BX               LR
   58 00000056                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\filter_s.d -o.\objects\filter_s.o -IP:\ECSE444\GXX_La
b0\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PAC
K\ARM\CMSIS\5.3.0\Device\ARM\ARMCM4\Include --predefine="__EVAL SETA 1" --prede
fine="__UVISION_VERSION SETA 515" --predefine="_RTE_ SETA 1" --predefine="ARMCM
4_FP SETA 1" --list=.\listings\filter_s.lst asm\filter_s.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

AVERAGE 00000048

Symbol: AVERAGE
   Definitions
      At line 50 in file asm\filter_s.s
   Uses
      At line 36 in file asm\filter_s.s
Comment: AVERAGE used once
EVEN_DEPTH 00000048

Symbol: EVEN_DEPTH
   Definitions
      At line 48 in file asm\filter_s.s
   Uses
      At line 30 in file asm\filter_s.s
Comment: EVEN_DEPTH used once
FILTER_S 00000000

Symbol: FILTER_S
   Definitions
      At line 3 in file asm\filter_s.s
   Uses
      At line 2 in file asm\filter_s.s
Comment: FILTER_S used once
FINISH 00000054

Symbol: FINISH
   Definitions
      At line 56 in file asm\filter_s.s
   Uses
      At line 14 in file asm\filter_s.s
      At line 23 in file asm\filter_s.s

ODD_DEPTH 0000002C

Symbol: ODD_DEPTH
   Definitions
      At line 33 in file asm\filter_s.s
   Uses
      At line 31 in file asm\filter_s.s
      At line 39 in file asm\filter_s.s
      At line 42 in file asm\filter_s.s
      At line 46 in file asm\filter_s.s

ORI_SIG_LOOP 00000010

Symbol: ORI_SIG_LOOP
   Definitions
      At line 20 in file asm\filter_s.s
   Uses
      At line 54 in file asm\filter_s.s
Comment: ORI_SIG_LOOP used once
text 00000000

Symbol: text
   Definitions
      At line 1 in file asm\filter_s.s
   Uses
      None



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Comment: text unused
7 symbols
342 symbols in table
